/* Generated By:JavaCC: Do not edit this line. MyNewGrammar.java */
package compilerproject;

public class MyNewGrammar implements MyNewGrammarConstants {
  public static void main(String args []) throws ParseException
  {
    MyNewGrammar parser = new MyNewGrammar(System.in);
    while (true)
    {
      try
      {
        switch (MyNewGrammar.one_line())
        {
          case 0 :
          break;
          case 1 :
          System.out.println("Goodbye.");
          break;
          default :
          break;
        }
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        MyNewGrammar.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }

 //input- >outputs 인식위한 토큰

//oneline 함수, 시작부분
  static final public int one_line() throws ParseException {
        String a;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GRAPH:
    case DAEGS:
    case DAEGE:
    case IDENTIFIER:
      a = expr();
         System.out.printf(a);
        {if (true) return 0;}
      break;
    case EOL:
      jj_consume_token(EOL);
          System.out.println();{if (true) return 0;}
      break;
    case 0:
      jj_consume_token(0);
           {if (true) return -1;}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//문장한줄씩을 인식 (괄호,함수,첫문장으로 나눠짐)
  static final public String expr() throws ParseException {
        String a;
        Token var;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GRAPH:
      //첫문장
      var = jj_consume_token(GRAPH);
        a="\u005cn"+"result "+student();
        {if (true) return a;}
      break;
    case IDENTIFIER:
      var = jj_consume_token(IDENTIFIER);
      jj_consume_token(EQUAL);
        a ="\u005ct" + var.toString() +"="+ func();
        {if (true) return a;}
      break;
    case DAEGS:
      var = jj_consume_token(DAEGS);
        a=var.toString();
        {if (true) return a;}
      break;
    case DAEGE:
      var = jj_consume_token(DAEGE);
        a=var.toString();
        {if (true) return a;}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//[20146110]부분인식함수
  static final public String student() throws ParseException {
        String a;
        Token var;
    var = jj_consume_token(STUDENTNUMBER);
        a=var.toString()+anystring();
        {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

//(input)- >(output)부분인식
  static final public String anystring() throws ParseException {
        String a;
        Token var;
    var = jj_consume_token(ANYSTRING);
        a=var.toString();
        {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

//함수 6개구분해서인식
  static final public String func() throws ParseException {
        String a;
        Token var;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RESHAPE:
      var = jj_consume_token(RESHAPE);
      jj_consume_token(START);
        a = "tf."+var.toString()+"(" +shape1();
        {if (true) return a;}
      break;
    case VARIABLE:
      var = jj_consume_token(VARIABLE);
        a="tf."+"Variable(tf.random_normal"+num()+")";
        {if (true) return a;}
      break;
    case CONV:
      var = jj_consume_token(CONV);
        a="tf.nn."+var.toString()+"2d"+oneparameter();
        {if (true) return a;}
      break;
    case ADD:
      var = jj_consume_token(ADD);
        a="tf."+var.toString()+twoparameter();
        {if (true) return a;}
      break;
    case RELU:
      var = jj_consume_token(RELU);
        a="tf.nn."+var.toString()+oneparameter();
        {if (true) return a;}
      break;
    case MAX_POOL:
      var = jj_consume_token(MAX_POOL);
        a="tf.nn."+var.toString()+oneparameter();
        {if (true) return a;}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//reshape함수를 뒷부분 인식
  static final public String shape1() throws ParseException {
        String a;
        Token var;
    var = jj_consume_token(IDENTIFIER);
    jj_consume_token(COMMA);
        a=var.toString()+","+shape2();
        {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

//shape1 이어서 인식
  static final public String shape2() throws ParseException {
        String a;
        Token var;
    var = jj_consume_token(FORSHAPE);
    jj_consume_token(END);
    jj_consume_token(34);
    a=var.toString()+")"+"\u005cn";
        {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

//variable함수 뒤쪽에[3,3,28,104]같은 부분 인식
  static final public String num() throws ParseException {
        String a;
        Token var;
    var = jj_consume_token(NUMCOM);
    jj_consume_token(34);
        a=var.toString();
        {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

//함수뒤에 parameter가 하나인거인식
  static final public String oneparameter() throws ParseException {
        String a;
        Token var;
    var = jj_consume_token(ONEPARA);
    jj_consume_token(34);
        a=var.toString();
        {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

//함수뒤에 parameter가 두개인거인식
  static final public String twoparameter() throws ParseException {
        String a;
        Token var;
    var = jj_consume_token(TWOPARA);
    jj_consume_token(34);
        a=var.toString();
        {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MyNewGrammarTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[3];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x438401,0x38400,0x3f0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public MyNewGrammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MyNewGrammar(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MyNewGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MyNewGrammar(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MyNewGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MyNewGrammar(MyNewGrammarTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MyNewGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[35];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 3; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 35; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}

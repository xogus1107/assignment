/* Generated By:JavaCC: Do not edit this line. MyNewGrammarConstants.java */
package programminglanguage;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface MyNewGrammarConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int MAX_POOL = 6;
  /** RegularExpression Id. */
  int NCHANGE = 7;
  /** RegularExpression Id. */
  int AVG_POOL = 8;
  /** RegularExpression Id. */
  int IF = 9;
  /** RegularExpression Id. */
  int SIGMOID = 10;
  /** RegularExpression Id. */
  int ELSE = 11;
  /** RegularExpression Id. */
  int CONV = 12;
  /** RegularExpression Id. */
  int LABEL = 13;
  /** RegularExpression Id. */
  int SCOPE = 14;
  /** RegularExpression Id. */
  int USE_BIAS = 15;
  /** RegularExpression Id. */
  int CONS = 16;
  /** RegularExpression Id. */
  int TF = 17;
  /** RegularExpression Id. */
  int DECONV = 18;
  /** RegularExpression Id. */
  int KEEP = 19;
  /** RegularExpression Id. */
  int GRAPH = 20;
  /** RegularExpression Id. */
  int GROUPS = 21;
  /** RegularExpression Id. */
  int FRAGMENT = 22;
  /** RegularExpression Id. */
  int TYPE = 23;
  /** RegularExpression Id. */
  int TENSOR = 24;
  /** RegularExpression Id. */
  int LINEAR = 25;
  /** RegularExpression Id. */
  int SHAPE_OF = 26;
  /** RegularExpression Id. */
  int NUMERIC_LITERAL = 27;
  /** RegularExpression Id. */
  int SSIBAL = 28;
  /** RegularExpression Id. */
  int STRING_LITERAL = 29;
  /** RegularExpression Id. */
  int LOGICAL_LITERAL = 30;
  /** RegularExpression Id. */
  int IDENTIFIER = 31;
  /** RegularExpression Id. */
  int LETTER = 32;
  /** RegularExpression Id. */
  int NUM = 33;
  /** RegularExpression Id. */
  int ARROW = 34;
  /** RegularExpression Id. */
  int LESS = 35;
  /** RegularExpression Id. */
  int LESS_EQUAL = 36;
  /** RegularExpression Id. */
  int GREATER = 37;
  /** RegularExpression Id. */
  int GREATER_EQUAL = 38;
  /** RegularExpression Id. */
  int EQUAL = 39;
  /** RegularExpression Id. */
  int NOT_EQUAL = 40;
  /** RegularExpression Id. */
  int POW = 41;
  /** RegularExpression Id. */
  int AND = 42;
  /** RegularExpression Id. */
  int OR = 43;
  /** RegularExpression Id. */
  int NOT = 44;
  /** RegularExpression Id. */
  int ASSIGN = 45;
  /** RegularExpression Id. */
  int COMMA = 46;
  /** RegularExpression Id. */
  int L_PAREN = 47;
  /** RegularExpression Id. */
  int R_PAREN = 48;
  /** RegularExpression Id. */
  int L_BRACKET = 49;
  /** RegularExpression Id. */
  int R_BRACKET = 50;
  /** RegularExpression Id. */
  int L_BRACE = 51;
  /** RegularExpression Id. */
  int R_BRACE = 52;
  /** RegularExpression Id. */
  int COLON = 53;
  /** RegularExpression Id. */
  int SEMI_COLON = 54;
  /** RegularExpression Id. */
  int QUESTION = 55;
  /** RegularExpression Id. */
  int DOT = 56;
  /** RegularExpression Id. */
  int PLUS = 57;
  /** RegularExpression Id. */
  int MINUS = 58;
  /** RegularExpression Id. */
  int MULT = 59;
  /** RegularExpression Id. */
  int DIV = 60;
  /** RegularExpression Id. */
  int CONSTANT = 61;
  /** RegularExpression Id. */
  int DIGIT = 62;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\\n\"",
    "\"max_pool_layer\"",
    "<NCHANGE>",
    "\"avg_pool\"",
    "\"if\"",
    "\"sigmoid\"",
    "\"else\"",
    "<CONV>",
    "\"label\"",
    "\"scope\"",
    "\"use_bias\"",
    "\"constant\"",
    "<TF>",
    "\"deconv\"",
    "<KEEP>",
    "\"graph\"",
    "\"groups\"",
    "\"fragment\"",
    "<TYPE>",
    "\"tensor\"",
    "\"linear\"",
    "\"shape_of\"",
    "<NUMERIC_LITERAL>",
    "<SSIBAL>",
    "<STRING_LITERAL>",
    "<LOGICAL_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<NUM>",
    "\"- >\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"==\"",
    "\"!=\"",
    "\"^\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "\"=\"",
    "\",\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\" { \"",
    "\" }\"",
    "\":\"",
    "\";\"",
    "\"?\"",
    "\".\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "<CONSTANT>",
    "<DIGIT>",
    "\"{\"",
    "\"}\"",
    "\"if length_of(dilation) != 0 else []\"",
    "\"if length_of(padding) != 0 else []\"",
    "\"if length_of(stride) != 0 else []\"",
    "\"fragment simple_recurrent_network\"",
    "\"->\"",
  };

}

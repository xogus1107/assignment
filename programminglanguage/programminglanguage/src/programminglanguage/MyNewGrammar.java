/* Generated By:JavaCC: Do not edit this line. MyNewGrammar.java */
package programminglanguage;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class MyNewGrammar implements MyNewGrammarConstants {
  public static void main(String args []) throws ParseException
  {

    MyNewGrammar parser = new MyNewGrammar(System.in);
    String txt;
    String fileName= "C:\u005c\u005cUsers\u005c\u005c\ubb38\ud0dc\ud604\u005c\u005cDesktop\u005c\u005c3\ud559\ub1442\ud559\uae30\u005c\u005cpl\u005c\u005cproject\u005c\u005cresult\u005c\u005cfragment_avg_pool_result.txt";
        txt = parser.one_line();

        System.out.println(txt);
        try {
                BufferedWriter fw = new BufferedWriter(new FileWriter(fileName));
                fw.write(txt);
                fw.flush();
                fw.close();
          }catch(Exception e) {
            e.printStackTrace();
            }

    /*while (true)
    {
      try
      {
        switch (MyNewGrammar.one_line())
        {
          case 0 : 
          System.out.println("OK.");
          break;
          case 1 : 
          System.out.println("Goodbye.");
          break;
          default : 
          break;
        }
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        MyNewGrammar.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }*/
  }

  static final public String one_line() throws ParseException {
  String res = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GRAPH:
      res = graph_definition();
      ;
      break;
    case FRAGMENT:
    case 68:
      res = fragment_definition();
      ;
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    System.out.println(res);
    {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  static final public String graph_definition() throws ParseException {
  String res1;
  String res2;
    res1 = graph_declaration();
    res2 = body();
      res1 = res1 + res2;
    {if (true) return res1;}
    throw new Error("Missing return statement in function");
  }

  static final public String fragment_definition() throws ParseException {
  String res1;
  String res2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FRAGMENT:
      res1 = fragment_declaration();
      res2 = body2();
      res1 = res1 + res2;
    {if (true) return res1;}
      break;
    case 68:
      res1 = fragment_declaration2();
      res2 = body3();
      res1 = res1 + res2;
    {if (true) return res1;}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String body3() throws ParseException {
  String a;
  String b = "";
    jj_consume_token(63);
    label_1:
    while (true) {
      a = assignment2();
      b = b + "\u005cr\u005cn" + a;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(64);
      {if (true) return b+"\u005cr\u005cn\u005cr\u005cn"+"return y";}
    throw new Error("Missing return statement in function");
  }

  static final public String body2() throws ParseException {
  String a;
  String b = "";
    jj_consume_token(63);
    label_2:
    while (true) {
      a = assignment2();
      b = b + "\u005cr\u005cn" + a;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
    }
    jj_consume_token(64);
      {if (true) return b+"\u005cr\u005cn\u005cr\u005cn"+"return output";}
    throw new Error("Missing return statement in function");
  }

  static final public String assignment2() throws ParseException {
  String a;
  String b;
  String c;
    a = lvalue_expr();
    jj_consume_token(ASSIGN);
    b = rvalue_expr2();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMI_COLON:
      jj_consume_token(SEMI_COLON);
      break;
    case IF:
    case 65:
    case 66:
    case 67:
      c = if_else_expr();
      b = b + c;
      jj_consume_token(SEMI_COLON);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return a + "=" + b + ";";}
    throw new Error("Missing return statement in function");
  }

  static final public String rvalue_expr2() throws ParseException {
  String a;
  Token res;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SHAPE_OF:
      a = shape_of();
    {if (true) return a;}
      break;
    case DECONV:
      jj_consume_token(DECONV);
      jj_consume_token(L_PAREN);
      a = argument_list();
      jj_consume_token(R_PAREN);
    {if (true) return "tf.layers.conv2d_transpose" + "(" + a + ")";}
      break;
    case CONV:
      jj_consume_token(CONV);
      jj_consume_token(L_PAREN);
      a = argument_list();
      jj_consume_token(R_PAREN);
    {if (true) return "tf.layers.conv2d" + "(" + a + ")";}
      break;
    case AVG_POOL:
      jj_consume_token(AVG_POOL);
      jj_consume_token(L_PAREN);
      a = argument_list();
      jj_consume_token(R_PAREN);
    {if (true) return "tf.nn.avg_pool" + "(" + a + ")";}
      break;
    case KEEP:
      res = jj_consume_token(KEEP);
      jj_consume_token(L_PAREN);
      a = argument_list();
      jj_consume_token(R_PAREN);
    {if (true) return res.toString() + "(" + a + ")";}
      break;
    case IDENTIFIER:
      res = jj_consume_token(IDENTIFIER);
      jj_consume_token(L_PAREN);
      a = argument_list();
      jj_consume_token(R_PAREN);
    {if (true) return "tf." + res.toString() + "(" + a + ")";}
      break;
    case SIGMOID:
      jj_consume_token(SIGMOID);
      jj_consume_token(L_PAREN);
      a = plus_list();
      jj_consume_token(R_PAREN);
        {if (true) return "tf.sigmoid"+"("+a+")";}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String plus_list() throws ParseException {
  String a;
  String b;
    a = new_one();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      jj_consume_token(PLUS);
      b = new_one();
                                        a=a+"+"+b;
    }
                {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  static final public String new_one() throws ParseException {
  Token res;
  Token res2;
  String a="";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LINEAR:
      jj_consume_token(LINEAR);
      jj_consume_token(L_PAREN);
      res = jj_consume_token(IDENTIFIER);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        res2 = jj_consume_token(IDENTIFIER);
                                                                    a=a+","+res2.toString();
      }
      jj_consume_token(R_PAREN);
        {if (true) return "linear("+res.toString()+a+")";}
      break;
    case IDENTIFIER:
      res = jj_consume_token(IDENTIFIER);
        {if (true) return res.toString();}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String shape_of() throws ParseException {
  Token res;
  Token res2;
  Token res1;
  String a;
  String b;
    res = jj_consume_token(SHAPE_OF);
    jj_consume_token(L_PAREN);
    res1 = jj_consume_token(IDENTIFIER);
    jj_consume_token(R_PAREN);
    jj_consume_token(L_BRACKET);
    res2 = jj_consume_token(NUMERIC_LITERAL);
    jj_consume_token(R_BRACKET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIV:
      jj_consume_token(DIV);
      jj_consume_token(GROUPS);
      a = if_else_expr();
    b= "tf.shape" + "(" + res1.toString() + ")" + "[" + res2.toString() + "]" + "/  " + "groups " + a;
      break;
    default:
      jj_la1[9] = jj_gen;
       b="tf.shape"+"("+res1.toString()+")"+"["+res2.toString()+"]";
    }
    {if (true) return b;}
    throw new Error("Missing return statement in function");
  }

  static final public String if_else_expr() throws ParseException {
  String a;
  String b;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      jj_consume_token(IF);
      a = total_expr();
      jj_consume_token(ELSE);
      b = total_expr();
    {if (true) return " if " + a + " else " + b;}
      break;
    case 65:
      jj_consume_token(65);
                {if (true) return " if len(dilation) != 0 else []";}
      break;
    case 66:
      jj_consume_token(66);
        {if (true) return " if len(padding) != 0 else []";}
      break;
    case 67:
      jj_consume_token(67);
        {if (true) return " if len(stride) != 0 else []";}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String total_expr() throws ParseException {
  String a;
  Token res1;
  Token res2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case USE_BIAS:
      jj_consume_token(USE_BIAS);
        {if (true) return "use_bias";}
      break;
    case MAX_POOL:
    case NCHANGE:
    case CONV:
    case CONS:
    case TF:
    case IDENTIFIER:
      a = invocation();
    {if (true) return a;}
      break;
    case NUMERIC_LITERAL:
    case STRING_LITERAL:
    case L_BRACKET:
      a = rvalue_expr_except();
    {if (true) return a;}
      break;
    case GROUPS:
      res1 = jj_consume_token(GROUPS);
      jj_consume_token(NOT_EQUAL);
      res2 = jj_consume_token(NUMERIC_LITERAL);
    {if (true) return res1.toString() + " != " + res2.toString() + " ";}
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String rvalue_expr_except() throws ParseException {
  Token res;
  String a;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMERIC_LITERAL:
      res = jj_consume_token(NUMERIC_LITERAL);
    {if (true) return res.toString();}
      break;
    case STRING_LITERAL:
      res = jj_consume_token(STRING_LITERAL);
    {if (true) return res.toString();}
      break;
    case L_BRACKET:
      a = array_rvalue_expr();
    {if (true) return a;}
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String fragment_declaration2() throws ParseException {
  Token res;
  String a;
    jj_consume_token(68);
    jj_consume_token(L_PAREN);
    a = parameter_list();
    jj_consume_token(R_PAREN);
    jj_consume_token(69);
    jj_consume_token(L_PAREN);
    result_list();
    jj_consume_token(R_PAREN);
    {if (true) return "def " + "simple_recurrent_network" + "(" + a + ")" + ":\u005cr\u005cn";}
    throw new Error("Missing return statement in function");
  }

  static final public String fragment_declaration() throws ParseException {
  Token res;
  String a;
    jj_consume_token(FRAGMENT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONV:
      res = jj_consume_token(CONV);
      break;
    case IDENTIFIER:
      res = jj_consume_token(IDENTIFIER);
      break;
    case NCHANGE:
      res = jj_consume_token(NCHANGE);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(L_PAREN);
    a = parameter_list();
    jj_consume_token(R_PAREN);
    jj_consume_token(69);
    jj_consume_token(L_PAREN);
    result_list();
    jj_consume_token(R_PAREN);
    {if (true) return "def " + res.toString() + "(" + a + ")" + ":\u005cr\u005cn";}
    throw new Error("Missing return statement in function");
  }

  static final public void result_list() throws ParseException {
    result();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      result();
    }
  }

  static final public void result() throws ParseException {
    jj_consume_token(IDENTIFIER);
    jj_consume_token(COLON);
    type_spec();
  }

  static final public String parameter_list() throws ParseException {
  Token res;
  String a = "";
  String b;
    a = parameter();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_6;
      }
      jj_consume_token(COMMA);
      b = parameter();
      a = a + ", " + b;
    }
    {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  static final public String parameter() throws ParseException {
  Token res;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      res = jj_consume_token(IDENTIFIER);
      jj_consume_token(COLON);
      type_spec();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        literal_expr();
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
    {if (true) return res.toString();}
      break;
    case GROUPS:
      res = jj_consume_token(GROUPS);
      jj_consume_token(COLON);
      type_spec();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        literal_expr();
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
    {if (true) return res.toString();}
      break;
    case LABEL:
      res = jj_consume_token(LABEL);
      jj_consume_token(COLON);
      type_spec();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        literal_expr();
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
    {if (true) return res.toString();}
      break;
    case SCOPE:
      res = jj_consume_token(SCOPE);
      jj_consume_token(COLON);
      type_spec();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        literal_expr();
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
    {if (true) return res.toString();}
      break;
    case USE_BIAS:
      res = jj_consume_token(USE_BIAS);
      jj_consume_token(COLON);
      type_spec();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        literal_expr();
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
    {if (true) return res.toString();}
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public void literal_expr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMERIC_LITERAL:
    case STRING_LITERAL:
    case LOGICAL_LITERAL:
      literal();
      break;
    case L_BRACKET:
      jj_consume_token(L_BRACKET);
      jj_consume_token(R_BRACKET);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void literal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMERIC_LITERAL:
      jj_consume_token(NUMERIC_LITERAL);
      break;
    case STRING_LITERAL:
      jj_consume_token(STRING_LITERAL);
      break;
    case LOGICAL_LITERAL:
      jj_consume_token(LOGICAL_LITERAL);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void type_spec() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TYPE:
      jj_consume_token(TYPE);
      array_type_spec();
      break;
    case TENSOR:
      tensor_type_spec();
      break;
    case L_PAREN:
      tuple_type_spec();
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void tuple_type_spec() throws ParseException {
    jj_consume_token(L_PAREN);
    jj_consume_token(TYPE);
    label_7:
    while (true) {
      jj_consume_token(COMMA);
      jj_consume_token(TYPE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_7;
      }
    }
    jj_consume_token(R_PAREN);
    tuple_addition();
  }

  static final public void tuple_addition() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case L_BRACKET:
      jj_consume_token(L_BRACKET);
      jj_consume_token(R_BRACKET);
    {if (true) return;}
      break;
    default:
      jj_la1[26] = jj_gen;
    {if (true) return;}
    }
  }

  static final public void array_type_spec() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case L_BRACKET:
      jj_consume_token(L_BRACKET);
      jj_consume_token(R_BRACKET);
    {if (true) return;}
      break;
    default:
      jj_la1[27] = jj_gen;
    {if (true) return;}
    }
  }

  static final public void tensor_type_spec() throws ParseException {
    jj_consume_token(TENSOR);
    jj_consume_token(LESS);
    jj_consume_token(TYPE);
    jj_consume_token(GREATER);
  }

  static final public String graph_declaration() throws ParseException {
  Token res;
    res = jj_consume_token(GRAPH);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(L_PAREN);
    jj_consume_token(IDENTIFIER);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_8;
      }
      jj_consume_token(COMMA);
      jj_consume_token(IDENTIFIER);
    }
    jj_consume_token(R_PAREN);
    jj_consume_token(69);
    jj_consume_token(L_PAREN);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(R_PAREN);
    {if (true) return "";}
    throw new Error("Missing return statement in function");
  }

  static final public String body() throws ParseException {
  Token res;
  String a;
  String b = "";
    jj_consume_token(63);
    label_9:
    while (true) {
      a = assignment();
      b = b + "\u005cr\u005cn" + a;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_9;
      }
    }
    jj_consume_token(64);
    {if (true) return b;}
    throw new Error("Missing return statement in function");
  }

  static final public String assignment() throws ParseException {
  String a;
  String b;
    a = lvalue_expr();
    jj_consume_token(ASSIGN);
    b = invocation();
    jj_consume_token(SEMI_COLON);
    {if (true) return a + "=" + b + ";";}
    throw new Error("Missing return statement in function");
  }

  static final public String lvalue_expr() throws ParseException {
  Token res;
    res = jj_consume_token(IDENTIFIER);
    {if (true) return res.toString();}
    throw new Error("Missing return statement in function");
  }

  static final public String invocation() throws ParseException {
  Token res1;
  Token res2;
  String a;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONS:
      res1 = jj_consume_token(CONS);
      jj_consume_token(L_PAREN);
      a = argument_list();
      jj_consume_token(R_PAREN);
        {if (true) return "tf."+res1.toString()+"("+a+")";}
      break;
    case NCHANGE:
      res1 = jj_consume_token(NCHANGE);
      jj_consume_token(L_PAREN);
      a = argument_list();
      jj_consume_token(R_PAREN);
    {if (true) return res1.toString() + "(" + a + ")";}
      break;
    case CONV:
      res1 = jj_consume_token(CONV);
      jj_consume_token(L_PAREN);
      a = argument_list();
      jj_consume_token(R_PAREN);
    {if (true) return "tf.nn." + "conv2d" + "(" + a + ")";}
      break;
    case MAX_POOL:
      res1 = jj_consume_token(MAX_POOL);
      jj_consume_token(L_PAREN);
      a = argument_list();
      jj_consume_token(R_PAREN);
    {if (true) return "tf.nn." + "max_pool" + "(" + a + ")";}
      break;
    case TF:
      res1 = jj_consume_token(TF);
      jj_consume_token(L_PAREN);
      a = argument_list();
      jj_consume_token(R_PAREN);
    {if (true) return "tf.nn." + res1.toString() + "(" + a + ")";}
      break;
    case IDENTIFIER:
      res1 = jj_consume_token(IDENTIFIER);
      jj_consume_token(L_PAREN);
      a = argument_list();
      jj_consume_token(R_PAREN);
    {if (true) return res1.toString() + "(" + a + ")";}
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String argument_list() throws ParseException {
  String a;
  String b;
    a = argument();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_10;
      }
      jj_consume_token(COMMA);
      b = argument();
                                      a = a + "," + b;
    }
    {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  static final public String argument() throws ParseException {
  Token res;
  String a;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LABEL:
      res = jj_consume_token(LABEL);
      a = argument_operate();
    {if (true) return res.toString() + a;}
      break;
    case IDENTIFIER:
      res = jj_consume_token(IDENTIFIER);
      a = argument_equal();
    {if (true) return res.toString() + a;}
      break;
    case SCOPE:
      res = jj_consume_token(SCOPE);
      a = argument_operate();
    {if (true) return res.toString() + a;}
      break;
    case GROUPS:
      res = jj_consume_token(GROUPS);
      jj_consume_token(ASSIGN);
      jj_consume_token(GROUPS);
    {if (true) return res.toString()+"=groups";}
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String argument_operate() throws ParseException {
  Token res;
  Token res2;
  String a;
    jj_consume_token(ASSIGN);
    a = onemore();
    {if (true) return "=" + a;}
    throw new Error("Missing return statement in function");
  }

  static final public String onemore() throws ParseException {
  Token res;
  String a;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LABEL:
    case SCOPE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LABEL:
        res = jj_consume_token(LABEL);
        break;
      case SCOPE:
        res = jj_consume_token(SCOPE);
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(PLUS);
      a = fuck();
    {if (true) return res.toString() + "+" + a;}
      break;
    case STRING_LITERAL:
      res = jj_consume_token(STRING_LITERAL);
                {if (true) return res.toString();}
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String fuck() throws ParseException {
  Token res;
  Token res2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SSIBAL:
      res2 = jj_consume_token(SSIBAL);
    {if (true) return res2.toString();}
      break;
    case STRING_LITERAL:
      res2 = jj_consume_token(STRING_LITERAL);
    {if (true) return res2.toString();}
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String argument_equal() throws ParseException {
  Token res;
  String a;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      a = rvalue_expr();
    {if (true) return "=" + a;}
      break;
    default:
      jj_la1[36] = jj_gen;
    {if (true) return "";}
    }
    throw new Error("Missing return statement in function");
  }

  static final public String rvalue_expr() throws ParseException {
  Token res;
  String a;
  String b;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMERIC_LITERAL:
      res = jj_consume_token(NUMERIC_LITERAL);
    {if (true) return res.toString();}
      break;
    case STRING_LITERAL:
      res = jj_consume_token(STRING_LITERAL);
    {if (true) return res.toString();}
      break;
    case L_BRACKET:
      a = array_rvalue_expr();
      b = array_add();
    {if (true) return a + b;}
      break;
    case IDENTIFIER:
      res = jj_consume_token(IDENTIFIER);
    {if (true) return res.toString();}
      break;
    case LOGICAL_LITERAL:
      res = jj_consume_token(LOGICAL_LITERAL);
    {if (true) return res.toString();}
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String array_add() throws ParseException {
  Token res;
        String a;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
      res = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case 65:
      case 66:
      case 67:
        a = if_else_expr();
        break;
      default:
        jj_la1[38] = jj_gen;
                                                   a="";
      }
    {if (true) return "+" + res.toString()+a;}
      break;
    default:
      jj_la1[39] = jj_gen;
    {if (true) return "";}
    }
    throw new Error("Missing return statement in function");
  }

  static final public String array_rvalue_expr() throws ParseException {
  Token res;
  Token res2;
  String a = "";
  String b;
    jj_consume_token(L_BRACKET);
    b = tuple_rvalue_expr();
                              a = a + b;
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[40] = jj_gen;
        break label_11;
      }
      jj_consume_token(COMMA);
      b = tuple_rvalue_expr();
                                                                       a = a + "," + b;
    }
    jj_consume_token(R_BRACKET);
    {if (true) return "[" + a + "]";}
    throw new Error("Missing return statement in function");
  }

  static final public String tuple_rvalue_expr() throws ParseException {
  Token res;
  Token res2;
  String a = "";
  String b;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      res = jj_consume_token(IDENTIFIER);
    {if (true) return res.toString();}
      break;
    case NUMERIC_LITERAL:
      res = jj_consume_token(NUMERIC_LITERAL);
    {if (true) return res.toString();}
      break;
    case L_PAREN:
      jj_consume_token(L_PAREN);
      res = jj_consume_token(NUMERIC_LITERAL);
    a = a + res.toString();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[41] = jj_gen;
          break label_12;
        }
        jj_consume_token(COMMA);
        res = jj_consume_token(NUMERIC_LITERAL);
      a = a + "," + res.toString();
      }
      jj_consume_token(R_PAREN);
    {if (true) return "(" + a + ")";}
      break;
    default:
      jj_la1[42] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MyNewGrammarTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[43];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x500000,0x400000,0x80000000,0x80000000,0x200,0x840c1500,0x0,0x0,0x82000000,0x0,0x200,0xa82390c0,0x28000000,0x80001080,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8020e000,0x68000000,0x68000000,0x1800000,0x0,0x0,0x0,0x0,0x80000000,0x800310c0,0x0,0x80206000,0x6000,0x20006000,0x30000000,0x0,0xe8000000,0x200,0x0,0x0,0x0,0x88000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x400000,0x0,0x2000000,0x4000,0x0,0x10000000,0x0,0x20000,0x20000,0x0,0x4000,0x4000,0x2000,0x2000,0x2000,0x2000,0x2000,0x0,0x20000,0x0,0x8000,0x4000,0x20000,0x20000,0x4000,0x0,0x0,0x4000,0x0,0x0,0x0,0x0,0x2000,0x20000,0x0,0x2000000,0x4000,0x4000,0x8000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x10,0x10,0x0,0x0,0xe,0x0,0x0,0x0,0x0,0x0,0xe,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public MyNewGrammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MyNewGrammar(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MyNewGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MyNewGrammar(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MyNewGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MyNewGrammar(MyNewGrammarTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MyNewGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[70];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 43; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 70; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}

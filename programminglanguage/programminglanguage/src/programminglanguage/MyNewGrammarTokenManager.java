/* Generated By:JavaCC: Do not edit this line. MyNewGrammarTokenManager.java */
package programminglanguage;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

/** Token Manager. */
public class MyNewGrammarTokenManager implements MyNewGrammarConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 31;
            return 12;
         }
         if ((active0 & 0x600000400000000L) != 0L || (active1 & 0x20L) != 0L)
            return 45;
         if ((active0 & 0x2002000L) != 0L)
         {
            jjmatchedKind = 31;
            return 132;
         }
         if ((active0 & 0x4004400L) != 0L)
         {
            jjmatchedKind = 31;
            return 95;
         }
         if ((active0 & 0x340840L) != 0L)
         {
            jjmatchedKind = 31;
            return 60;
         }
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 31;
            return 70;
         }
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 31;
            return 41;
         }
         if ((active0 & 0x200L) != 0L || (active1 & 0xeL) != 0L)
         {
            jjmatchedKind = 31;
            return 82;
         }
         if ((active0 & 0x400000L) != 0L || (active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 31;
            return 57;
         }
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 23;
            return -1;
         }
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 31;
            return 53;
         }
         return -1;
      case 1:
         if ((active0 & 0x10000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 31;
               jjmatchedPos = 1;
            }
            return 69;
         }
         if ((active0 & 0x100L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 31;
               jjmatchedPos = 1;
            }
            return 11;
         }
         if ((active0 & 0x4000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 31;
               jjmatchedPos = 1;
            }
            return 98;
         }
         if ((active0 & 0x774ac40L) != 0L || (active1 & 0x10L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 31;
               jjmatchedPos = 1;
            }
            return 60;
         }
         if ((active0 & 0x200L) != 0L || (active1 & 0xeL) != 0L)
            return 60;
         return -1;
      case 2:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 2;
            return 10;
         }
         if ((active0 & 0x774ec40L) != 0L || (active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 2;
            return 60;
         }
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 2;
            return 68;
         }
         return -1;
      case 3:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 3;
            return 9;
         }
         if ((active0 & 0x800L) != 0L)
            return 60;
         if ((active0 & 0x775e440L) != 0L || (active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 3;
            return 60;
         }
         return -1;
      case 4:
         if ((active0 & 0x7658440L) != 0L || (active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 4;
            return 60;
         }
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 4;
            return 8;
         }
         if ((active0 & 0x106000L) != 0L)
            return 60;
         return -1;
      case 5:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 5;
            return 7;
         }
         if ((active0 & 0x4418440L) != 0L || (active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 5;
            return 60;
         }
         if ((active0 & 0x3240000L) != 0L)
            return 60;
         return -1;
      case 6:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 6;
            return 6;
         }
         if ((active0 & 0x400L) != 0L)
            return 60;
         if ((active0 & 0x4418040L) != 0L || (active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 6;
            return 60;
         }
         return -1;
      case 7:
         if ((active0 & 0x100L) != 0L)
            return 5;
         if ((active0 & 0x4418000L) != 0L || (active1 & 0x10L) != 0L)
            return 60;
         if ((active0 & 0x40L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 31;
               jjmatchedPos = 7;
            }
            return 60;
         }
         return -1;
      case 8:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 8;
            return 60;
         }
         return -1;
      case 9:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 9;
            return 60;
         }
         return -1;
      case 10:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 10;
            return 60;
         }
         return -1;
      case 11:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 11;
            return 60;
         }
         return -1;
      case 12:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 12;
            return 60;
         }
         return -1;
      case 13:
         if ((active0 & 0x40L) != 0L)
            return 60;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 13:
         jjmatchedKind = 2;
         return jjMoveStringLiteralDfa1_0(0x20L, 0x0L);
      case 32:
         jjmatchedKind = 1;
         return jjMoveStringLiteralDfa1_0(0x18000000000000L, 0x0L);
      case 33:
         jjmatchedKind = 44;
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x0L);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 47);
      case 41:
         return jjStopAtPos(0, 48);
      case 42:
         return jjStopAtPos(0, 59);
      case 43:
         return jjStartNfaWithStates_0(0, 57, 45);
      case 44:
         return jjStopAtPos(0, 46);
      case 45:
         jjmatchedKind = 58;
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x20L);
      case 46:
         return jjStopAtPos(0, 56);
      case 47:
         return jjStopAtPos(0, 60);
      case 58:
         return jjStopAtPos(0, 53);
      case 59:
         return jjStopAtPos(0, 54);
      case 60:
         jjmatchedKind = 35;
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x0L);
      case 61:
         jjmatchedKind = 45;
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x0L);
      case 62:
         jjmatchedKind = 37;
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x0L);
      case 63:
         return jjStopAtPos(0, 23);
      case 91:
         return jjStopAtPos(0, 49);
      case 93:
         return jjStopAtPos(0, 50);
      case 94:
         return jjStopAtPos(0, 41);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x100L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x10000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x40000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x800L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x400000L, 0x10L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x300000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x200L, 0xeL);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x2002000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x40L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x4004400L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x1000000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x8000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 63);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 64);
      default :
         return jjMoveNfa_0(13, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 32:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0L);
      case 38:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 42);
         break;
      case 61:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 36);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 38);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 39);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 40);
         break;
      case 62:
         if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(1, 69);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x2040L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x1040000L, active1, 0L);
      case 102:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xeL);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000400L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x800L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x700000L, active1, 0x10L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L, active1, 0L);
      case 123:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0L);
      case 124:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 43);
         break;
      case 125:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 52);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(2, 51);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xeL);
      case 62:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(2, 34);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x4500000L, active1, 0x10L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x500L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x3010000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x204000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x40L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0x8140L, active1, 0L);
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 11, 60);
         return jjMoveStringLiteralDfa4_0(active0, 0x2002000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L, active1, 0x10L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xeL);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x4104000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x1010000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L, active1, 0L);
      case 101:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 14, 60);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L, active1, 0xeL);
      case 104:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 60);
         break;
      case 108:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 13, 60);
         break;
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L, active1, 0x10L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000400L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x200140L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L, active1, 0x10L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x8400L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0xeL);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x140L, active1, 0L);
      case 114:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 24, 60);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 25, 60);
         break;
      case 115:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 21, 60);
         break;
      case 118:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 18, 60);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000L, active1, 0L);
      case 100:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 10, 60);
         break;
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0xeL);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x410000L, active1, 0x10L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000140L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(7, 26, 60);
         break;
      case 108:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(7, 8, 5);
         return jjMoveStringLiteralDfa8_0(active0, 0x40L, active1, 0L);
      case 115:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(7, 15, 60);
         break;
      case 116:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(7, 16, 60);
         else if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1eL);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10L);
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0x40L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0xeL);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0xeL);
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x40L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x40L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x10L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0xeL);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 102:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0xeL);
      case 109:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x10L);
      case 121:
         return jjMoveStringLiteralDfa12_0(active0, 0x40L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1);
      return 12;
   }
   switch(curChar)
   {
      case 40:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0xeL);
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0x40L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1);
      return 13;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x2L);
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x10L);
      case 112:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x4L);
      case 114:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(13, 6, 60);
         break;
      case 115:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1);
}
static private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(12, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, active1);
      return 14;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa15_0(active1, 0x4L);
      case 101:
         return jjMoveStringLiteralDfa15_0(active1, 0x10L);
      case 105:
         return jjMoveStringLiteralDfa15_0(active1, 0x2L);
      case 116:
         return jjMoveStringLiteralDfa15_0(active1, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, active1);
}
static private int jjMoveStringLiteralDfa15_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(13, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, active1);
      return 15;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa16_0(active1, 0x10L);
      case 100:
         return jjMoveStringLiteralDfa16_0(active1, 0x4L);
      case 108:
         return jjMoveStringLiteralDfa16_0(active1, 0x2L);
      case 114:
         return jjMoveStringLiteralDfa16_0(active1, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, active1);
}
static private int jjMoveStringLiteralDfa16_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(14, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, active1);
      return 16;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa17_0(active1, 0x2L);
      case 100:
         return jjMoveStringLiteralDfa17_0(active1, 0x4L);
      case 105:
         return jjMoveStringLiteralDfa17_0(active1, 0x8L);
      case 114:
         return jjMoveStringLiteralDfa17_0(active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, active1);
}
static private int jjMoveStringLiteralDfa17_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(15, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, active1);
      return 17;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa18_0(active1, 0x8L);
      case 101:
         return jjMoveStringLiteralDfa18_0(active1, 0x10L);
      case 105:
         return jjMoveStringLiteralDfa18_0(active1, 0x4L);
      case 116:
         return jjMoveStringLiteralDfa18_0(active1, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, active1);
}
static private int jjMoveStringLiteralDfa18_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(16, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, 0L, active1);
      return 18;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa19_0(active1, 0x10L);
      case 101:
         return jjMoveStringLiteralDfa19_0(active1, 0x8L);
      case 105:
         return jjMoveStringLiteralDfa19_0(active1, 0x2L);
      case 110:
         return jjMoveStringLiteralDfa19_0(active1, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(17, 0L, active1);
}
static private int jjMoveStringLiteralDfa19_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(17, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, 0L, active1);
      return 19;
   }
   switch(curChar)
   {
      case 41:
         return jjMoveStringLiteralDfa20_0(active1, 0x8L);
      case 103:
         return jjMoveStringLiteralDfa20_0(active1, 0x4L);
      case 111:
         return jjMoveStringLiteralDfa20_0(active1, 0x2L);
      case 117:
         return jjMoveStringLiteralDfa20_0(active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(18, 0L, active1);
}
static private int jjMoveStringLiteralDfa20_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(18, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, 0L, active1);
      return 20;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa21_0(active1, 0x8L);
      case 41:
         return jjMoveStringLiteralDfa21_0(active1, 0x4L);
      case 110:
         return jjMoveStringLiteralDfa21_0(active1, 0x2L);
      case 114:
         return jjMoveStringLiteralDfa21_0(active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(19, 0L, active1);
}
static private int jjMoveStringLiteralDfa21_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(19, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, 0L, active1);
      return 21;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa22_0(active1, 0x4L);
      case 33:
         return jjMoveStringLiteralDfa22_0(active1, 0x8L);
      case 41:
         return jjMoveStringLiteralDfa22_0(active1, 0x2L);
      case 114:
         return jjMoveStringLiteralDfa22_0(active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(20, 0L, active1);
}
static private int jjMoveStringLiteralDfa22_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(20, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, 0L, active1);
      return 22;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa23_0(active1, 0x2L);
      case 33:
         return jjMoveStringLiteralDfa23_0(active1, 0x4L);
      case 61:
         return jjMoveStringLiteralDfa23_0(active1, 0x8L);
      case 101:
         return jjMoveStringLiteralDfa23_0(active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(21, 0L, active1);
}
static private int jjMoveStringLiteralDfa23_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(21, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, 0L, active1);
      return 23;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa24_0(active1, 0x8L);
      case 33:
         return jjMoveStringLiteralDfa24_0(active1, 0x2L);
      case 61:
         return jjMoveStringLiteralDfa24_0(active1, 0x4L);
      case 110:
         return jjMoveStringLiteralDfa24_0(active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(22, 0L, active1);
}
static private int jjMoveStringLiteralDfa24_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(22, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, 0L, active1);
      return 24;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa25_0(active1, 0x4L);
      case 48:
         return jjMoveStringLiteralDfa25_0(active1, 0x8L);
      case 61:
         return jjMoveStringLiteralDfa25_0(active1, 0x2L);
      case 116:
         return jjMoveStringLiteralDfa25_0(active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(23, 0L, active1);
}
static private int jjMoveStringLiteralDfa25_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(23, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, 0L, active1);
      return 25;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa26_0(active1, 0xaL);
      case 48:
         return jjMoveStringLiteralDfa26_0(active1, 0x4L);
      case 95:
         return jjMoveStringLiteralDfa26_0(active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(24, 0L, active1);
}
static private int jjMoveStringLiteralDfa26_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(24, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, 0L, active1);
      return 26;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa27_0(active1, 0x4L);
      case 48:
         return jjMoveStringLiteralDfa27_0(active1, 0x2L);
      case 101:
         return jjMoveStringLiteralDfa27_0(active1, 0x8L);
      case 110:
         return jjMoveStringLiteralDfa27_0(active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(25, 0L, active1);
}
static private int jjMoveStringLiteralDfa27_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(25, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(26, 0L, active1);
      return 27;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa28_0(active1, 0x2L);
      case 101:
         return jjMoveStringLiteralDfa28_0(active1, 0x14L);
      case 108:
         return jjMoveStringLiteralDfa28_0(active1, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(26, 0L, active1);
}
static private int jjMoveStringLiteralDfa28_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(26, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(27, 0L, active1);
      return 28;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa29_0(active1, 0x2L);
      case 108:
         return jjMoveStringLiteralDfa29_0(active1, 0x4L);
      case 115:
         return jjMoveStringLiteralDfa29_0(active1, 0x8L);
      case 116:
         return jjMoveStringLiteralDfa29_0(active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(27, 0L, active1);
}
static private int jjMoveStringLiteralDfa29_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(27, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(28, 0L, active1);
      return 29;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa30_0(active1, 0x8L);
      case 108:
         return jjMoveStringLiteralDfa30_0(active1, 0x2L);
      case 115:
         return jjMoveStringLiteralDfa30_0(active1, 0x4L);
      case 119:
         return jjMoveStringLiteralDfa30_0(active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(28, 0L, active1);
}
static private int jjMoveStringLiteralDfa30_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(28, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(29, 0L, active1);
      return 30;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa31_0(active1, 0x8L);
      case 101:
         return jjMoveStringLiteralDfa31_0(active1, 0x4L);
      case 111:
         return jjMoveStringLiteralDfa31_0(active1, 0x10L);
      case 115:
         return jjMoveStringLiteralDfa31_0(active1, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(29, 0L, active1);
}
static private int jjMoveStringLiteralDfa31_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(29, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(30, 0L, active1);
      return 31;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa32_0(active1, 0x4L);
      case 91:
         return jjMoveStringLiteralDfa32_0(active1, 0x8L);
      case 101:
         return jjMoveStringLiteralDfa32_0(active1, 0x2L);
      case 114:
         return jjMoveStringLiteralDfa32_0(active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(30, 0L, active1);
}
static private int jjMoveStringLiteralDfa32_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(30, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(31, 0L, active1);
      return 32;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa33_0(active1, 0x2L);
      case 91:
         return jjMoveStringLiteralDfa33_0(active1, 0x4L);
      case 93:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(32, 67);
         break;
      case 107:
         if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(32, 68);
         break;
      default :
         break;
   }
   return jjStartNfa_0(31, 0L, active1);
}
static private int jjMoveStringLiteralDfa33_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(31, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(32, 0L, active1);
      return 33;
   }
   switch(curChar)
   {
      case 91:
         return jjMoveStringLiteralDfa34_0(active1, 0x2L);
      case 93:
         if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(33, 66);
         break;
      default :
         break;
   }
   return jjStartNfa_0(32, 0L, active1);
}
static private int jjMoveStringLiteralDfa34_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(32, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(33, 0L, active1);
      return 34;
   }
   switch(curChar)
   {
      case 93:
         if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(34, 65);
         break;
      default :
         break;
   }
   return jjStartNfa_0(33, 0L, active1);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 147;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 82:
               case 60:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(60);
                  break;
               case 53:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(60);
                  break;
               case 95:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(60);
                  break;
               case 98:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(60);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 27)
                        kind = 27;
                     jjCheckNAddStates(0, 3);
                  }
                  else if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(4, 6);
                  else if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(45);
                  else if (curChar == 36)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAdd(60);
                  }
                  else if (curChar == 63)
                  {
                     if (kind > 23)
                        kind = 23;
                  }
                  break;
               case 132:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(60);
                  break;
               case 70:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(60);
                  break;
               case 9:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(60);
                  break;
               case 57:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(60);
                  break;
               case 69:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(60);
                  break;
               case 11:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(60);
                  break;
               case 7:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(60);
                  break;
               case 5:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(60);
                  break;
               case 41:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(60);
                  break;
               case 68:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(60);
                  break;
               case 12:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(60);
                  break;
               case 10:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(60);
                  break;
               case 8:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(60);
                  break;
               case 6:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(60);
                  break;
               case 43:
                  if (curChar == 63)
                     kind = 23;
                  break;
               case 44:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(45);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAddStates(7, 9);
                  break;
               case 46:
                  if (curChar == 46)
                     jjCheckNAdd(47);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAddTwoStates(47, 48);
                  break;
               case 49:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(50);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAdd(50);
                  break;
               case 59:
                  if (curChar != 36)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(60);
                  break;
               case 139:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAddStates(0, 3);
                  break;
               case 140:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAdd(140);
                  break;
               case 141:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(4, 6);
                  break;
               case 142:
                  if (curChar == 47)
                     jjCheckNAddTwoStates(143, 144);
                  break;
               case 143:
                  if ((0x3ff800000000000L & l) != 0L)
                     jjCheckNAddTwoStates(143, 144);
                  break;
               case 144:
                  if ((0x8400000000L & l) != 0L && kind > 28)
                     kind = 28;
                  break;
               case 145:
                  if ((0x3ff800000000000L & l) != 0L)
                     jjCheckNAddTwoStates(145, 146);
                  break;
               case 146:
                  if ((0x8400000000L & l) != 0L && kind > 29)
                     kind = 29;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 82:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAdd(60);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 87;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 53:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAdd(60);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 95:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAdd(60);
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 103;
                  else if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 98;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 98:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAdd(60);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 13:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAdd(60);
                  }
                  if (curChar == 108)
                     jjAddStates(10, 11);
                  else if (curChar == 115)
                     jjAddStates(12, 14);
                  else if (curChar == 105)
                     jjAddStates(15, 16);
                  else if (curChar == 99)
                     jjAddStates(17, 18);
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 57;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 53;
                  else if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 41;
                  else if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 35;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 132:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAdd(60);
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 137;
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 70:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAdd(60);
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 72;
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 9:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAdd(60);
                  }
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 57:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAdd(60);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 69:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAdd(60);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 71;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAdd(60);
                  }
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAdd(60);
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAdd(60);
                  }
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 41:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAdd(60);
                  }
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 68:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAdd(60);
                  }
                  if (curChar == 118)
                  {
                     if (kind > 12)
                        kind = 12;
                  }
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 12:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAdd(60);
                  }
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 10:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAdd(60);
                  }
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 8:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAdd(60);
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 6:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAdd(60);
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 0:
                  if (curChar == 114 && kind > 7)
                     kind = 7;
                  break;
               case 1:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 2:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 14:
                  if (curChar == 117 && kind > 17)
                     kind = 17;
                  break;
               case 15:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 110 && kind > 19)
                     kind = 19;
                  break;
               case 19:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 122)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 101 && kind > 19)
                     kind = 19;
                  break;
               case 38:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 42:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 48:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(19, 20);
                  break;
               case 51:
                  if (curChar == 101 && kind > 30)
                     kind = 30;
                  break;
               case 52:
                  if (curChar == 117)
                     jjCheckNAdd(51);
                  break;
               case 54:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 115)
                     jjCheckNAdd(51);
                  break;
               case 56:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 58:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(60);
                  break;
               case 60:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(60);
                  break;
               case 61:
                  if (curChar == 99)
                     jjAddStates(17, 18);
                  break;
               case 62:
                  if (curChar == 114 && kind > 12)
                     kind = 12;
                  break;
               case 63:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 71:
                  if (curChar == 118 && kind > 12)
                     kind = 12;
                  break;
               case 72:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if (curChar == 105)
                     jjAddStates(15, 16);
                  break;
               case 75:
                  if (curChar == 110 && kind > 7)
                     kind = 7;
                  break;
               case 76:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 83:
                  if (curChar == 114 && kind > 23)
                     kind = 23;
                  break;
               case 84:
                  if (curChar == 101)
                     jjCheckNAdd(83);
                  break;
               case 85:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if (curChar == 115)
                     jjAddStates(12, 14);
                  break;
               case 90:
                  if (curChar == 120 && kind > 17)
                     kind = 17;
                  break;
               case 91:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 92:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 94:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 96:
                  if (curChar == 97)
                     jjCheckNAdd(83);
                  break;
               case 97:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 99:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if (curChar == 103 && kind > 23)
                     kind = 23;
                  break;
               case 101:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 102:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 103:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if (curChar == 108)
                     jjAddStates(10, 11);
                  break;
               case 106:
                  if (curChar == 110 && kind > 17)
                     kind = 17;
                  break;
               case 107:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 108:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 109:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 110:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 111:
                  if (curChar == 122)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 112:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 113:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 114:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 115:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 116:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 117:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 118:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 119:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 120:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 121:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 122:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 123:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 124:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 125:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 126:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 127:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 128:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 129:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 130:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 131:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 133:
                  if (curChar == 108 && kind > 23)
                     kind = 23;
                  break;
               case 134:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 135:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 136:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 137:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 138:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 143:
                  if ((0x7fffffeaffffffeL & l) != 0L)
                     jjAddStates(21, 22);
                  break;
               case 145:
                  if ((0x7fffffeaffffffeL & l) != 0L)
                     jjAddStates(23, 24);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 147 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   45, 46, 48, 140, 142, 145, 146, 45, 46, 48, 132, 138, 95, 99, 104, 82, 
   88, 70, 73, 49, 50, 143, 144, 145, 146, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, 
"\155\141\170\137\160\157\157\154\137\154\141\171\145\162", null, "\141\166\147\137\160\157\157\154", "\151\146", 
"\163\151\147\155\157\151\144", "\145\154\163\145", null, "\154\141\142\145\154", "\163\143\157\160\145", 
"\165\163\145\137\142\151\141\163", "\143\157\156\163\164\141\156\164", null, "\144\145\143\157\156\166", null, 
"\147\162\141\160\150", "\147\162\157\165\160\163", "\146\162\141\147\155\145\156\164", null, 
"\164\145\156\163\157\162", "\154\151\156\145\141\162", "\163\150\141\160\145\137\157\146", null, null, 
null, null, null, null, null, "\55\40\76", "\74", "\74\75", "\76", "\76\75", 
"\75\75", "\41\75", "\136", "\46\46", "\174\174", "\41", "\75", "\54", "\50", "\51", 
"\133", "\135", "\40\173\40", "\40\175", "\72", "\73", "\77", "\56", "\53", "\55", 
"\52", "\57", null, null, "\173", "\175", 
"\151\146\40\154\145\156\147\164\150\137\157\146\50\144\151\154\141\164\151\157\156\51\40\41\75\40\60\40\145\154\163\145\40\133\135", 
"\151\146\40\154\145\156\147\164\150\137\157\146\50\160\141\144\144\151\156\147\51\40\41\75\40\60\40\145\154\163\145\40\133\135", 
"\151\146\40\154\145\156\147\164\150\137\157\146\50\163\164\162\151\144\145\51\40\41\75\40\60\40\145\154\163\145\40\133\135", 
"\146\162\141\147\155\145\156\164\40\163\151\155\160\154\145\137\162\145\143\165\162\162\145\156\164\137\156\145\164\167\157\162\153", "\55\76", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xbffffffcffffffc1L, 0x3fL, 
};
static final long[] jjtoSkip = {
   0x3eL, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[147];
static private final int[] jjstateSet = new int[294];
static protected char curChar;
/** Constructor. */
public MyNewGrammarTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public MyNewGrammarTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 147; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 10 && (0x600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
